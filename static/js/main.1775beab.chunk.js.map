{"version":3,"sources":["img sync nonrecursive /.(png|jpe?g|svg)$","img/frozen.jpg","img/fullmetaljacket.jpg","img/matrix.jpg","img/oldboy.jpg","img/starwars.jpg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["map","./frozen.jpg","./fullmetaljacket.jpg","./matrix.jpg","./oldboy.jpg","./starwars.jpg","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","MoviePoster","_ref","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref2","genre","Movie","this","props","genres","index","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","Component","r","images","item","replace","importAll","require","App","state","_renderMovies","_this","movies","movie","src_Movie_0","title_english","medium_cover_image","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","error","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1775beab.chunk.js","sourcesContent":["var map = {\n\t\"./frozen.jpg\": 25,\n\t\"./fullmetaljacket.jpg\": 26,\n\t\"./matrix.jpg\": 27,\n\t\"./oldboy.jpg\": 28,\n\t\"./starwars.jpg\": 29\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 24;","module.exports = __webpack_public_path__ + \"static/media/frozen.28f43c52.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fullmetaljacket.08196c43.jpg\";","module.exports = __webpack_public_path__ + \"static/media/matrix.bc3401a4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/oldboy.92f9190a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starwars.d0e73923.jpg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; //yarn add prop-types\r\nimport LinesEllipsis from 'react-lines-ellipsis'; //yarn add react-lines-ellipsis\r\nimport './Movie.css';\r\n\r\nclass Movie extends Component{\r\n\r\n    static propTypes = {\r\n        title: PropTypes.string,//number\r\n        poster: PropTypes.string.isRequired,\r\n        genres: PropTypes.array.isRequired,\r\n        synopsis: PropTypes.string.isRequired\r\n    }\r\n    render(){\r\n        //console.log(this.props);\r\n        return (\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie__Column\">\r\n                    <MoviePoster poster={this.props.poster} alt={this.props.title}/>\r\n                </div>\r\n                <div className=\"Movie__Column\">\r\n                    <h1>{this.props.title}</h1>\r\n                    <div className=\"Movie__Genres\">\r\n                        {this.props.genres.map((genre, index) => \r\n                            <MovieGenre genre={genre} key={index}/>)}\r\n                    </div>\r\n                    <div className=\"Movie__Synopsis\">\r\n                        <LinesEllipsis\r\n                            text={this.props.synopsis}\r\n                            maxLine='3'\r\n                            ellipsis=' ...'\r\n                            trimRight\r\n                            basedOn='letters'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// class MoviePoster extends Component{\r\n\r\n//     static propTypes = {\r\n//         poster: PropTypes.string.isRequired\r\n//     }\r\n//     render(){\r\n//         //console.log(this.props);\r\n//         return(\r\n//             <img src={this.props.poster} alt=\"poster\"/>\r\n//         );\r\n//     }\r\n// }\r\nfunction MoviePoster({poster, alt}){\r\n    /*\r\n        functional component\r\n        : 단순히 html만 리턴하는 기능만 필요할때(리턴만 있음)\r\n        : state 없고, function render 없고, 라이프사이클도 없음\r\n    */\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n    );\r\n}\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre} </span>\r\n    )\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n/*\nimport matrix from './img/matrix.jpg';\nimport fullmetaljacket from './img/fullmetaljacket.jpg';\nimport oldboy from './img/oldboy.jpg';\nimport starwars from './img/starwars.jpg';\n --> function importAll로 해결\n*/\n\nfunction importAll(r){\n  let images = {};\n  r.keys().map((item, index) => { \n    return images[item.replace('./', '')] = r(item);\n  });\n  return images;\n}\nconst images = importAll(require.context('./img', false, /\\.(png|jpe?g|svg)$/));\n\nclass App extends Component {\n\n  state = {\n    // greeting: 'Hello!',\n  }\n    /*\n    [ Component Lifecycle ]\n    Render : componentWillMount() -> render() -> componentDidMount()\n    Update : componentWillReceiveProps() -> shouldComponentUpdate() == true -> componentWillUpdate() -> render() -> component\n  */\n  // componentWillMount(){\n  //   console.log('will mount');\n  // }\n  // componentDidMount(){\n  //   console.log('did mount');\n  //   // setTimeout(() => {\n  //   //   // this.state.greeting = 'something';  // Do not mutate state directly\n  //   //   this.setState({\n  //   //     greeting: 'Hello again!'\n  //   //   });\n  //   // }, 2000);\n  //   setTimeout(() => {\n  //     this.setState({\n  //       movies: [\n  //         {\n  //           title: \"Matrix\",\n  //           poster: images['matrix.jpg']\n  //         },\n  //         {\n  //           title: \"Full Metal Jacket\",\n  //           poster: images['fullmetaljacket.jpg']\n  //         },\n  //         {\n  //           title: \"Oldboy\",\n  //           poster: images['oldboy.jpg']\n  //         },\n  //         {\n  //           title: \"Star Wars\",\n  //           poster: images['starwars.jpg']\n  //         },\n  //         {\n  //           title: 'Frozen',\n  //           poster: images['frozen.jpg']\n  //         }\n  //       ]\n  //     });\n  //   }, 2000);\n  // }\n  componentDidMount(){\n    // [ fetch() : React에서 쓰는 ajax]\n    // [ promise : javascript에서 비동기프로그래밍 시나리오 관리하게 해주는거(catch와 then으로) ]\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie, index) => {\n      //console.log(movie)\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />\n    });\n    return movies;\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies) //화살표 함수는 return을 자동으로 해준다\n    .catch(err => console.error(err));\n  }\n\n  render() {\n    console.log('render');\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {/* {this.state.greeting} */}\n        {/* {this.state.movies.map((movie, index) => {\n          return <Movie key={index} title={movie.title} poster={movie.poster}/>\n        })} */}\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}